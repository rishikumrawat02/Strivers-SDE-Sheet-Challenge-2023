import java.util.* ;
import java.io.*; 

public class Solution {

    // minHeap function which take size of Queries and Queries as Input.
// Returns an array out outputs depending on the query.
    static int[] minHeap(int n, int[][] q) {
        // Write your code here.
        MinHeap h1 = new MinHeap(n);
        ArrayList<Integer> res = new ArrayList<>();
        for(int i=0; i<q.length; i++){
            int type=q[i][0];
            if(type==0){
                int x=q[i][1];
                h1.insert(x);
            }else{
                res.add(h1.delete());
            }
        }

        int ans[] = new int[res.size()];
        for(int i=0; i<res.size(); i++){
            ans[i]=res.get(i);
        }
        return ans;
    }
}

class MinHeap{
    int arr[]; int size; int cap;
    MinHeap(int capacity){
        arr=new int[capacity]; 
        size=0; this.cap=capacity;
    }

    void heapify(int i){
        int left=leftChild(i); int right=rightChild(i);
        int smallest=i;
        if(left<size && arr[left]<arr[smallest]) smallest=left;
        if(right<size && arr[right]<arr[smallest]) smallest=right;
        int temp=arr[i];
        arr[i]=arr[smallest];
        arr[smallest]=temp;
        if(smallest!=i) heapify(smallest);
    }

    void insert(int x){
        arr[size++]=x;
        for(int i=size-1; i!=0 && arr[parent(i)]>arr[i];){
            int temp=arr[i];
            arr[i]=arr[parent(i)];
            arr[parent(i)]=temp;
            i=parent(i);
        }
    }

    int delete(){
        if(size==0) return -1;
        if(size==1) return arr[--size];
        int temp=arr[0];
        arr[0]=arr[size-1];
        size--;
        heapify(0);
        return temp;
    }

    int leftChild(int i){return 2*i+1;}
    int rightChild(int i){return 2*i+2;}
    int parent(int i){return (i-1)/2;}
}
