import java.util.*;
import java.io.*;

public class Solution {

    public static long getInversions(long arr[], int n) {
        long res[] = {0};
        partition(0, n - 1, arr, res);
        return res[0];
    }

    static void partition(int left, int right, long arr[], long res[]) {
        if (left >= right) return;
        int mid = (left + right) >> 1;
        partition(left, mid, arr, res);
        partition(mid + 1, right, arr, res);
        merge(left, mid, right, arr, res);
    }

    static void merge(int left, int mid, int right, long arr[], long res[]) {
        int leftSize = mid - left + 1;
        int rightSize = right - mid;

        long leftArr[] = new long[leftSize];
        long rightArr[] = new long[rightSize];

        for (int i = 0; i < leftSize; i++)
            leftArr[i] = arr[left + i];
        for (int i = 0; i < rightSize; i++)
            rightArr[i] = arr[mid + 1 + i];

        int i = 0, j = 0, idx = left;

        while (i < leftSize && j < rightSize) {
            if (leftArr[i] <= rightArr[j]) {
                arr[idx++] = leftArr[i++];
            } else {
                arr[idx++] = rightArr[j++];
                res[0] += (leftSize - i);
            }
        }

        while (i < leftSize)
            arr[idx++] = leftArr[i++];
        while (j < rightSize)
            arr[idx++] = rightArr[j++];
    }
}
