import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution 
{
    static class Pair implements Comparable<Pair>{
        int u; int v; int w;
        Pair(int u, int v, int w){
            this.u=u; this.v=v; this.w=w;
        }

        public int compareTo(Pair p){
            return Integer.compare(this.w, p.w);
        }
    }
    public static ArrayList<ArrayList<Integer>> calculatePrimsMST(int n, int m, ArrayList<ArrayList<Integer>> g)
    {
        // Write your code here.
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0; i<n; i++) adj.add(new ArrayList<>());
        for(int i=0; i<m; i++){
            int u=g.get(i).get(0)-1; int v=g.get(i).get(1)-1; int w=g.get(i).get(2);
            adj.get(u).add(new Pair(u,v,w));
            adj.get(v).add(new Pair(v,u,w));            
        }

        HashSet<Integer> set = new HashSet<>(); set.add(0);
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for(Pair val: adj.get(0)){
            pq.add(val);
        }

        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        while(res.size()!=n-1){
            Pair cur = pq.poll();
            if(set.contains(cur.v)) continue;
            set.add(cur.v);
            ArrayList<Integer> temp = new ArrayList<>();
            temp.add(cur.u+1); temp.add(cur.v+1); temp.add(cur.w);
            res.add(temp);
            for(Pair child: adj.get(cur.v)){
                pq.add(child);
            }
        }

        return res;       
        
    }
}
