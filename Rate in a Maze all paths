import java.util.* ;
import java.io.*; 
public class Solution {
    public static ArrayList<ArrayList<Integer>> ratInAMaze(int[][] maze, int n) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        int matrix[][] = new int[n][n];
        boolean visit[][] = new boolean[n][n];
        if(maze[0][0]==0 || maze[n-1][n-1]==0) return res;
        visit[0][0]=true; matrix[0][0]=1; helper(0,0,n,maze,visit,matrix,res);
        return res;
    }

    static boolean isPossible(boolean visit[][], int i, int j, int n, int maze[][]){
        if(i>=0 && j>=0 && i<n && j<n && visit[i][j]==false && maze[i][j]==1) return true;
        return false;   
    }
    
    static int dx[]={-1,1,0,0};
    static int dy[]={0,0,-1,1};    

    static void helper(int i, int j, int n, int [][]maze, boolean visit[][], int matrix[][], ArrayList<ArrayList<Integer>> res){
        if(i==n-1 && j==n-1){
            ArrayList<Integer> temp = new ArrayList<>();
            for(int i1=0; i1<n; i1++){
                for(int j1=0; j1<n; j1++) temp.add(matrix[i1][j1]);
            }
            res.add(temp);
            return;
        }

        for(int k=0; k<4; k++){
            int nI=dx[k]+i; int nJ=dy[k]+j;
            if(isPossible(visit,nI,nJ,n,maze)){
                matrix[nI][nJ]=1;
                visit[nI][nJ]=true;
                helper(nI,nJ,n,maze,visit,matrix,res);
                visit[nI][nJ]=false;
                matrix[nI][nJ]=0;
            }
        }
        return;
    }
}
